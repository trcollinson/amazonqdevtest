AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM API Project with Cognito Authentication
  
Resources:
  # S3 Bucket for File Uploads
  UserUploadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "user-uploads-${AWS::AccountId}-${AWS::Region}"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
              - GET
              - POST
              - HEAD
            AllowedOrigins:
              - "*"
            MaxAge: 3600
      
  # S3 Bucket Policy to allow uploads with more permissions
  UserUploadsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref UserUploadsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:PutObjectAcl'
            Resource: !Sub "${UserUploadsBucket.Arn}/*"

  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: api-user-pool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: api-app-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoUserPoolAuthorizer
        Authorizers:
          CognitoUserPoolAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  # Lambda Function - Hello World
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: CognitoUserPoolAuthorizer

  # Lambda Function - Users
  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
              Resource: !GetAtt CognitoUserPool.Arn
      Events:
        ListUsers:
          Type: Api
          Properties:
            Path: /users
            Method: get
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: CognitoUserPoolAuthorizer
        GetUser:
          Type: Api
          Properties:
            Path: /users/{username}
            Method: get
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: CognitoUserPoolAuthorizer
        CreateUser:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: CognitoUserPoolAuthorizer

  # Lambda Function - Website to Text
  WebsiteToTextFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: website_to_text/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          BEDROCK_REGION: !Ref AWS::Region
          DEFAULT_MODEL: amazon.nova-pro-v1:0
          MAX_CONTENT_LENGTH: 10000
          TIMEOUT_SECONDS: 30
          INFERENCE_PROFILE_ARN: arn:aws:bedrock:us-west-2:762778437347:inference-profile/us.amazon.nova-pro-v1:0
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:ListFoundationModels
                - bedrock:ListInferenceProfiles
                - bedrock:CreateInferenceProfile
              Resource: '*'
      Events:
        WebsiteToText:
          Type: Api
          Properties:
            Path: /website-to-text
            Method: post
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: CognitoUserPoolAuthorizer

  # Lambda Function - S3 Upload URL Generator
  S3UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3_upload/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          BUCKET_NAME: !Ref UserUploadsBucket
          URL_EXPIRATION_SECONDS: 300
          MAX_UPLOAD_SIZE_MB: 10
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:GetObject
              Resource: !Sub "${UserUploadsBucket.Arn}/*"
      Events:
        S3Upload:
          Type: Api
          Properties:
            Path: /upload-url
            Method: post
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: CognitoUserPoolAuthorizer

Outputs:
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  UsersFunction:
    Description: "Users Lambda Function ARN"
    Value: !GetAtt UsersFunction.Arn
  UsersListApi:
    Description: "API Gateway endpoint URL for Prod stage for listing users"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/users/"
  UserGetApi:
    Description: "API Gateway endpoint URL for Prod stage for getting a specific user"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/users/{username}"
  UserCreateApi:
    Description: "API Gateway endpoint URL for Prod stage for creating a user"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/users"
  WebsiteToTextFunction:
    Description: "Website to Text Lambda Function ARN"
    Value: !GetAtt WebsiteToTextFunction.Arn
  WebsiteToTextApi:
    Description: "API Gateway endpoint URL for Prod stage for website to text function"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/website-to-text"
  S3UploadFunction:
    Description: "S3 Upload URL Generator Lambda Function ARN"
    Value: !GetAtt S3UploadFunction.Arn
  S3UploadApi:
    Description: "API Gateway endpoint URL for Prod stage for S3 upload URL generator"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/upload-url"
  UserUploadsBucket:
    Description: "S3 bucket for user uploads"
    Value: !Ref UserUploadsBucket
  CognitoUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref CognitoUserPoolClient